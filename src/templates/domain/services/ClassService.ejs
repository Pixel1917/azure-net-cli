import { BaseService } from '@azure-net/kit';
import { <%= pascalCaseName %>Repo } from '<%= aliasRepo %>';
import type { <%= pascalCaseName %>CreateRequest, <%= pascalCaseName %>UpdateRequest, I<%= pascalCaseName %>CollectionQuery } from '<%= aliasDomain %>/<%= pascalCaseName %>';

export class <%= pascalCaseName %>Service extends BaseService {
    constructor(private <%= camelCaseName %>Repo = new <%= pascalCaseName %>Repo()) {
        super();
    }

    async collection(queryParams?: I<%= pascalCaseName %>CollectionQuery) {
        return await this.transformResponse(this.<%= camelCaseName %>Repo.collection(queryParams));
    }

    async resource(id: number) {
        return await this.transformResponse(this.<%= camelCaseName %>Repo.resource(id));
    }

    async create(request: <%= pascalCaseName %>CreateRequest) {
        return await this.transformResponse(this.<%= camelCaseName %>Repo.create(request.json()));
    }

    async update(id: number, request: <%= pascalCaseName %>UpdateRequest) {
        return await this.transformResponse(this.<%= camelCaseName %>Repo.update(id, request.json()));
    }

    async remove(id: number) {
        return await this.transformResponse(this.<%= camelCaseName %>Repo.remove(id));
    }
}