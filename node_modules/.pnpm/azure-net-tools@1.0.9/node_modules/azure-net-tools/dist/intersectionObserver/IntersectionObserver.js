/**
 * Utility class for observing intersection changes on a DOM element.
 *
 * @template T - Type of the observed DOM element.
 */
export class IntersectionObserverUtil {
    /**
     * Creates an IntersectionObserver and starts observing the given node.
     *
     * @param node - DOM element to observe.
     * @param params - Observer parameters including callback, options, and once flag.
     */
    constructor(node, params) {
        this.node = node;
        this.params = params;
        this.observer = new IntersectionObserver(this.handleIntersect.bind(this), params.options);
        this.observer.observe(this.node);
    }
    /**
     * Internal handler for IntersectionObserver entries.
     *
     * @param entries - Array of IntersectionObserverEntry objects.
     */
    handleIntersect(entries) {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                this.params.callback(entry, this.node);
                if (this.params.once) {
                    this.observer.unobserve(this.node);
                }
            }
        });
    }
    /**
     * Disconnects the observer and stops observing the element.
     * Should be called to clean up resources and avoid memory leaks.
     */
    disconnect() {
        this.observer.unobserve(this.node);
        this.observer.disconnect();
    }
}
//# sourceMappingURL=IntersectionObserver.js.map