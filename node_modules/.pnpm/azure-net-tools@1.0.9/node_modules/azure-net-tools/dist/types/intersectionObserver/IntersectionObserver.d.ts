/**
 * Parameters for IntersectionObserverUtil.
 *
 * @template T - Type of the observed DOM element.
 */
export interface ObserverParams<T extends Element> {
    /**
     * Callback function called when the intersection status of the element changes.
     *
     * @param entry - The IntersectionObserverEntry for the observed element.
     * @param node - The observed DOM element.
     */
    callback: (entry: IntersectionObserverEntry, node: T) => void;
    /**
     * Options object passed to the IntersectionObserver constructor.
     * @see https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/IntersectionObserver#parameters
     */
    options?: IntersectionObserverInit;
    /**
     * If true, the observer will unobserve the node after the first intersection.
     */
    once?: boolean;
}
/**
 * Utility class for observing intersection changes on a DOM element.
 *
 * @template T - Type of the observed DOM element.
 */
export declare class IntersectionObserverUtil<T extends Element> {
    private observer;
    private readonly node;
    private params;
    /**
     * Creates an IntersectionObserver and starts observing the given node.
     *
     * @param node - DOM element to observe.
     * @param params - Observer parameters including callback, options, and once flag.
     */
    constructor(node: T, params: ObserverParams<T>);
    /**
     * Internal handler for IntersectionObserver entries.
     *
     * @param entries - Array of IntersectionObserverEntry objects.
     */
    private handleIntersect;
    /**
     * Disconnects the observer and stops observing the element.
     * Should be called to clean up resources and avoid memory leaks.
     */
    disconnect(): void;
}
