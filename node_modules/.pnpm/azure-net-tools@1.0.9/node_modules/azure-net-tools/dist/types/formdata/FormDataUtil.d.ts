export declare class FormDataUtil {
    /**
     * Converts a FormData instance into a nested JavaScript object.
     * Supports keys with bracket notation like "foo[bar][baz]".
     * Arrays are reconstructed from indexed keys.
     *
     * @template T - The expected return object type.
     * @param {FormData} formData - The FormData to convert.
     * @returns {T} The resulting nested object.
     */
    static toObject<T = object>(formData: FormData): T;
    /**
     * Converts a JavaScript object into a FormData instance.
     * Supports nested objects, arrays, Maps, Sets, Dates, and Blob/File objects.
     * Detects cyclic references and throws an error if found.
     *
     * @param {unknown} obj - The object to convert.
     * @param {FormData} [formData] - An existing FormData instance to append to (optional).
     * @param {string} [namespace] - The namespace prefix for nested keys (used internally).
     * @param {WeakSet<object>} [seen] - Set of visited objects to detect cycles (used internally).
     * @returns {FormData} The populated FormData instance.
     * @throws {Error} Throws if a cyclic reference is detected in the object.
     */
    static fromObject(obj: unknown, formData?: FormData, namespace?: string, seen?: WeakSet<object>): FormData;
}
