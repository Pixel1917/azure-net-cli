/**
 * A utility class for working with JavaScript objects.
 */
export declare class ObjectUtil {
    /**
     * Creates a shallow copy of the given object.
     * @param obj - The object to clone.
     * @returns A shallow copy of the object.
     */
    static clone<T>(obj: T): T;
    /**
     * Creates a deep copy of the given object.
     * @param obj - The object to deep clone.
     * @param structured - Whether to use `structuredClone` (true) or `JSON.stringify`/`parse` (false).
     * @returns A deep copy of the object.
     * @throws If deep cloning fails.
     */
    static deepClone<T>(obj: T, structured?: boolean): T;
    /**
     * Compares two values by their JSON string representation.
     * @param obj1 - First value to compare.
     * @param obj2 - Second value to compare.
     * @returns `true` if both values have the same JSON string, `false` otherwise.
     */
    static compareAsString(obj1: unknown, obj2: unknown): boolean;
    /**
     * Counts the number of own enumerable properties of an object.
     * @param obj - The object to inspect.
     * @returns The number of own properties.
     */
    static countProps(obj: unknown): number;
    /**
     * Deeply compares two values for equality.
     * Functions are compared by their string representation.
     * @param v1 - First value.
     * @param v2 - Second value.
     * @returns `true` if equal, `false` otherwise.
     */
    static equals(v1: unknown, v2: unknown): boolean;
    /**
     * Checks if all keys in an object (including nested objects) are `null` or `undefined`.
     * @param obj - The object to check.
     * @returns `true` if all keys are empty, `false` otherwise.
     */
    static isAllKeysEmpty(obj: unknown): boolean;
    /**
     * Checks if the given object has no own properties.
     * @param obj - The object to check.
     * @returns `true` if object is empty, `false` otherwise.
     */
    static isObjectEmpty(obj: unknown): boolean;
    /**
     * Converts an object into a syntax-highlighted HTML string.
     * @param obj - The object to render.
     * @returns HTML string with syntax highlighting for JSON.
     */
    static renderAsString(obj: unknown): string;
}
