/**
 * Utility class for managing cookies in the browser environment.
 * Supports setting, getting, deleting, checking, and clearing cookies.
 * All methods are static and operate without creating instances.
 */
export declare class Cookies {
    /**
     * Checks if cookies are supported in the current environment.
     * @returns {boolean} True if running in browser and cookies are enabled.
     * @private
     */
    private static isSupported;
    /**
     * Sets a cookie with the specified key, value, and options.
     * Serializes non-string values as JSON.
     *
     * @template T
     * @param {string} key - The cookie key (alphanumeric, dash, underscore only).
     * @param {T} value - The value to store in the cookie.
     * @param {Object} [options] - Optional cookie attributes.
     * @param {Date|number} [options.expires] - Expiration date or number of days until expiration.
     * @param {number} [options.maxAge] - Max age in seconds.
     * @param {string} [options.path] - Cookie path.
     * @param {string} [options.domain] - Cookie domain.
     * @param {boolean} [options.secure] - Secure flag.
     * @param {'Strict'|'Lax'|'None'} [options.sameSite] - SameSite attribute.
     * @returns {void}
     */
    static set<T = string>(key: string, value: T, options?: {
        expires?: Date | number;
        maxAge?: number;
        path?: string;
        domain?: string;
        secure?: boolean;
        sameSite?: 'Strict' | 'Lax' | 'None';
    }): void;
    /**
     * Retrieves the value of a cookie by key.
     * Attempts to parse JSON if possible.
     *
     * @template T
     * @param {string} key - The cookie key to retrieve.
     * @returns {T | null} The cookie value, parsed as type T or null if not found.
     */
    static get<T = string>(key: string): T | null;
    /**
     * Deletes a cookie by key, optionally specifying path and domain.
     *
     * @param {string} key - The cookie key to delete.
     * @param {string} [path] - The path attribute to match.
     * @param {string} [domain] - The domain attribute to match.
     * @returns {void}
     */
    static delete(key: string, path?: string, domain?: string): void;
    /**
     * Checks if a cookie with the given key exists.
     *
     * @param {string} key - The cookie key to check.
     * @returns {boolean} True if cookie exists, false otherwise.
     */
    static has(key: string): boolean;
    /**
     * Retrieves all cookies as a key-value record.
     * Attempts to parse JSON values.
     *
     * @returns {Record<string, unknown>} An object with all cookie keys and their values.
     */
    static getAll(): Record<string, unknown>;
    /**
     * Deletes all cookies for the current domain and optional path.
     * It's recommended to specify path and domain for full cleanup.
     *
     * @param {string} [path] - The path attribute to match when deleting.
     * @param {string} [domain] - The domain attribute to match when deleting.
     * @returns {void}
     */
    static clear(path?: string, domain?: string): void;
}
