/**
 * A simple event bus implementation that allows subscribing to
 * channels and publishing data to those channels.
 *
 * @template D - The set of allowed string keys for channels.
 */
export class EventBus {
    /**
     * Creates a new EventBus instance.
     *
     * @param {EventBusChannels<D>} [initialChannels={}] - Optional initial channels with listeners.
     */
    constructor(initialChannels = {}) {
        this.channels = new Map(Object.entries(initialChannels));
    }
    /**
     * Subscribes a listener function to a specific channel.
     *
     * @template D - The set of allowed string keys for channels.
     * @template T - The expected data type for the listener callback.
     * @param {D} channel - The channel to subscribe to.
     * @param {(data: T) => void} listener - The callback function to invoke when the event is published.
     */
    subscribe(channel, listener) {
        if (!this.channels.has(channel)) {
            this.channels.set(channel, []);
        }
        this.channels.get(channel).push(listener);
    }
    /**
     * Publishes data to all listeners subscribed to the given channel.
     *
     * @template D - The set of allowed string keys for channels.
     * @template T - The type of data being published.
     * @param {D} channel - The channel to publish to.
     * @param {T} data - The data to send to all listeners.
     */
    publish(channel, data) {
        const listeners = this.channels.get(channel);
        if (!listeners || listeners.length === 0) {
            return;
        }
        listeners.forEach((listener) => listener(data));
    }
}
//# sourceMappingURL=EventBus.js.map