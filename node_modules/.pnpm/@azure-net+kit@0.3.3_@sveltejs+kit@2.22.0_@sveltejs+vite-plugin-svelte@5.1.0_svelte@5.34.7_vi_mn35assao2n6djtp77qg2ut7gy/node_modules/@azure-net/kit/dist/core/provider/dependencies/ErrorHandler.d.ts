import { BaseRequest, type RequestErrors } from '../../request/index.js';
import { HttpServiceError } from '../../httpService/index.js';
export type AppErrorType = 'http' | 'request' | 'app' | 'abort';
export interface AppError<T = unknown, D = never> {
    type: AppErrorType;
    message: string;
    fields?: RequestErrors<T>;
    status?: number;
    original?: HttpServiceError<T> | BaseRequest<T, T> | Error;
    custom?: D;
}
export type ErrorType<T = unknown> = Error | BaseRequest<T, T> | HttpServiceError<T>;
export declare const parseHttpError: <T = unknown, D = never>(error: HttpServiceError<T>) => AppError<T, D>;
export declare const parseRequestError: <T = unknown, D = never>(error: BaseRequest<T, T>) => AppError<T, D>;
export declare const parseBaseError: <D = never>(error: Error) => AppError<never, D>;
export declare const createErrorParser: <Custom = unknown>(customHandler?: <T = unknown>(error: ErrorType<T>, utils: {
    parseBaseError: typeof parseBaseError;
    parseRequestError: typeof parseRequestError;
    parseHttpError: typeof parseHttpError;
}) => AppError<T, Custom>) => (<T>(error: ErrorType<T>) => AppError<T, Custom>);
