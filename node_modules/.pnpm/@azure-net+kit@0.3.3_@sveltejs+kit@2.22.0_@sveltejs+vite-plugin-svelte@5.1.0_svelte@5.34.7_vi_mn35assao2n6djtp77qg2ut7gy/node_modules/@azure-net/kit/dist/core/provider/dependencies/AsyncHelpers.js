import { createErrorParser } from './ErrorHandler.js';
export const createAsyncHelpers = (opts) => {
    const errorParser = opts?.parseError ?? createErrorParser();
    const createAsyncAction = async (action, args) => {
        if (args?.abort?.condition) {
            args.abort.onAbort?.();
            const abortError = {
                type: 'abort',
                message: 'aborted',
                original: new Error('aborted')
            };
            if (args?.reject)
                throw abortError;
            return {
                success: false,
                error: abortError,
                response: args?.fallbackResponse
            };
        }
        try {
            const response = await action;
            const result = { response, success: true };
            await args?.onSuccess?.(result);
            return result;
        }
        catch (err) {
            const error = errorParser(err);
            if (args?.reject)
                throw error;
            const result = { error, response: args?.fallbackResponse, success: false };
            await args?.onError?.(result);
            return result;
        }
    };
    const createAsyncResource = async (action, args) => {
        if (args?.abort?.condition) {
            args.abort.onAbort?.();
            return args.fallbackResponse;
        }
        try {
            const response = await action;
            await args?.onSuccess?.(response);
            return response;
        }
        catch (err) {
            const error = errorParser(err);
            await args?.onError?.(error);
            if (args?.reject)
                throw error;
            return args?.fallbackResponse;
        }
    };
    return {
        createAsyncAction,
        createAsyncResource
    };
};
