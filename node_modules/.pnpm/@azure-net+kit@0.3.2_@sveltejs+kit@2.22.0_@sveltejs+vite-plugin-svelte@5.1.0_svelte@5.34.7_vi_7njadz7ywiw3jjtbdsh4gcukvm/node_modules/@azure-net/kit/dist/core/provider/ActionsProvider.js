import { RequestContext } from '../../edges/context/index.js';
import { browser } from '$app/environment';
import { error, fail, redirect } from '@sveltejs/kit';
export const createActionsProvider = (name, factory, inject) => {
    const cacheKey = name;
    return () => {
        if (browser) {
            throw Error('Do not use actions on client side');
        }
        const context = RequestContext.current();
        if (!context.data.providers) {
            context.data.providers = new Map();
        }
        const contextMap = context.data.providers;
        if (cacheKey && contextMap.has(cacheKey)) {
            return contextMap.get(cacheKey);
        }
        const instance = factory({ ...inject, context, utils: { fail, redirect, error } });
        if (cacheKey) {
            contextMap.set(cacheKey, instance);
        }
        return instance;
    };
};
export const createActionsProviderFactory = (inject) => {
    return function createInjectedProvider(name, factory) {
        return createActionsProvider(name, factory, inject);
    };
};
