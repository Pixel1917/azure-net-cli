import { createErrorParser, type AppError } from './ErrorHandler.js';
export declare const createAsyncHelpers: <Custom = unknown>(opts?: {
    parseError?: ReturnType<typeof createErrorParser<Custom>>;
}) => {
    createAsyncAction: <Req = unknown, Res = unknown>(action: Promise<Res>, args?: {
        onSuccess?: (result: {
            success: boolean;
            response: Res;
            error?: AppError<undefined, Custom> | undefined;
        }) => Promise<unknown> | unknown;
        onError?: (result: {
            success: boolean;
            response: never;
            error?: AppError<Req, Custom> | undefined;
        }) => Promise<unknown> | unknown;
        reject?: boolean;
        abort?: {
            condition: boolean;
            onAbort?: () => void;
        };
        fallbackResponse?: Res;
    }) => Promise<{
        success: boolean;
        response: Res;
        error?: AppError<Req, Custom> | undefined;
    }>;
    createAsyncResource: <Res_1, Req = unknown>(action: Promise<Res_1>, args?: {
        onSuccess?: (result: Res_1) => Promise<unknown> | unknown;
        onError?: (error: AppError<Req, Custom>) => Promise<unknown> | unknown;
        reject?: boolean;
        abort?: {
            condition: boolean;
            onAbort?: () => void;
        };
        fallbackResponse?: Res_1;
    }) => Promise<Res_1>;
};
