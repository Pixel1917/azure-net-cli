import { type Options } from 'ky';
import { EventBus } from 'azure-net-tools';
export interface IHttpServiceResponse<T = unknown> {
    headers: Record<string, string>;
    status: number;
    success: boolean;
    data: T;
    message: string;
}
export interface IHttpServiceError<T = unknown> extends IHttpServiceResponse<T> {
    original?: Error;
}
export declare class HttpServiceResponse<T> implements IHttpServiceResponse<T> {
    headers: Record<string, string>;
    status: number;
    success: boolean;
    data: T;
    message: string;
    constructor({ headers, status, success, data, message }: IHttpServiceResponse<T>);
}
export declare class HttpServiceError<T> implements IHttpServiceError<T> {
    headers: Record<string, string>;
    status: number;
    success: boolean;
    data: T;
    message: string;
    original?: Error;
    constructor({ headers, status, success, data, message, original }: IHttpServiceError<T>);
}
export interface IHttpServiceOptions extends Options {
    responseFormat?: 'json' | 'blob' | 'text';
}
export declare const httpServiceEventBus: EventBus<"HttpServiceError">;
export declare class HttpService {
    private readonly baseUrl;
    private readonly instance;
    private readonly requestHandler?;
    private readonly errorHandler?;
    constructor(opts: {
        baseUrl: string;
        baseOptions?: Options;
        requestHandler?: (options: Options) => void | Promise<void>;
        errorHandler?: (err: IHttpServiceError) => unknown;
    });
    private prepareOptions;
    private prepareResponse;
    post<T>(url: string, options?: IHttpServiceOptions): Promise<IHttpServiceResponse<T>>;
    get<T>(url: string, options?: IHttpServiceOptions): Promise<IHttpServiceResponse<T>>;
    patch<T>(url: string, options?: IHttpServiceOptions): Promise<IHttpServiceResponse<T>>;
    delete<T>(url: string, options?: IHttpServiceOptions): Promise<IHttpServiceResponse<T>>;
    put<T>(url: string, options?: IHttpServiceOptions): Promise<IHttpServiceResponse<T>>;
    private handleError;
}
