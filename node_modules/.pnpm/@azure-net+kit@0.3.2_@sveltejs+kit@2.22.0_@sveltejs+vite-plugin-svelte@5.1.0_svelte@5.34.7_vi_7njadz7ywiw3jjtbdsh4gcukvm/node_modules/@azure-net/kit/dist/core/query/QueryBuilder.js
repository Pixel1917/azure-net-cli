export class QueryBuilder {
    defaultArrayFormat;
    defaultObjectFormat;
    constructor(options) {
        this.defaultArrayFormat = options?.arrayFormat ?? 'repeat';
        this.defaultObjectFormat = options?.objectFormat ?? 'default';
    }
    build(params, opts) {
        const arrayFormat = opts?.arrayFormat ?? this.defaultArrayFormat;
        const objectFormat = opts?.objectFormat ?? this.defaultObjectFormat;
        const parts = this.serialize(params, arrayFormat, objectFormat);
        const delimiter = opts?.delimiter ?? true;
        return delimiter && parts.length ? `?${parts.join('&')}` : parts.join('&');
    }
    serialize(obj, arrayFormat, objectFormat, prefix = '') {
        const parts = [];
        for (const [key, value] of Object.entries(obj)) {
            if (value === null || value === undefined)
                continue;
            const fullKey = prefix ? (objectFormat === 'nested-brackets' ? `${prefix}[${key}]` : `${prefix}.${key}`) : key;
            if (Array.isArray(value)) {
                parts.push(...this.encodeArray(fullKey, value, arrayFormat));
            }
            else if (typeof value === 'object' && !(value instanceof Date)) {
                if (objectFormat === 'nested-brackets') {
                    parts.push(...this.serialize(value, arrayFormat, objectFormat, fullKey));
                }
                else {
                    parts.push(`${encodeURIComponent(fullKey)}=${encodeURIComponent(JSON.stringify(value))}`);
                }
            }
            else {
                parts.push(`${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`);
            }
        }
        return parts;
    }
    encodeArray(key, arr, arrayFormat) {
        const cleanArray = arr.filter((v) => v !== null && v !== undefined).map(String);
        switch (arrayFormat) {
            case 'repeat':
                return cleanArray.map((v) => `${encodeURIComponent(key)}=${encodeURIComponent(v)}`);
            case 'brackets':
                return cleanArray.map((v) => `${encodeURIComponent(key)}[]=${encodeURIComponent(v)}`);
            case 'comma':
                return [`${encodeURIComponent(key)}=${encodeURIComponent(cleanArray.join(','))}`];
            case 'json':
                return [`${encodeURIComponent(key)}=${encodeURIComponent(JSON.stringify(cleanArray))}`];
            default:
                throw new Error(`Unsupported array format: ${arrayFormat}`);
        }
    }
}
