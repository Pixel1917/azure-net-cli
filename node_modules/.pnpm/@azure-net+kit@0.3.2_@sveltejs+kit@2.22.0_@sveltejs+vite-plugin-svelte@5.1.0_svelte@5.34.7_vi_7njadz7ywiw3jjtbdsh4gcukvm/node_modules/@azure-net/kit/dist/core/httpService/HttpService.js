import ky, {} from 'ky';
import { EventBus } from 'azure-net-tools';
export class HttpServiceResponse {
    headers;
    status;
    success;
    data;
    message;
    constructor({ headers, status, success, data, message }) {
        this.headers = headers;
        this.status = status;
        this.success = success;
        this.data = data;
        this.message = message;
    }
}
export class HttpServiceError {
    headers;
    status;
    success;
    data;
    message;
    original;
    constructor({ headers, status, success, data, message, original }) {
        this.headers = headers;
        this.status = status;
        this.success = success;
        this.data = data;
        this.message = message;
        this.original = original;
    }
}
export const httpServiceEventBus = new EventBus({
    HttpServiceError: []
});
export class HttpService {
    baseUrl;
    instance;
    requestHandler;
    errorHandler;
    constructor(opts) {
        this.baseUrl = opts.baseUrl;
        this.instance = ky.create(opts?.baseOptions);
        this.errorHandler = opts?.errorHandler ?? undefined;
        this.requestHandler = opts?.requestHandler ?? undefined;
    }
    async prepareOptions(requestOptions) {
        const options = typeof requestOptions === 'object' ? { ...requestOptions } : {};
        if (this.requestHandler) {
            await this.requestHandler(options);
        }
        return options;
    }
    async prepareResponse(request, format = 'json') {
        return new HttpServiceResponse({
            headers: request.headers instanceof Headers ? Object.fromEntries(request.headers.entries()) : {},
            status: request.status,
            success: request.status <= 400,
            data: await request?.[format](),
            message: 'Request completed'
        });
    }
    async post(url, options) {
        return await this.instance
            .post(this.baseUrl + url, await this.prepareOptions(options))
            .then((response) => {
            return this.prepareResponse(response, options?.responseFormat);
        })
            .catch(async (error) => {
            throw await this.handleError(error);
        });
    }
    async get(url, options) {
        return await this.instance
            .get(this.baseUrl + url, await this.prepareOptions(options))
            .then((response) => {
            return this.prepareResponse(response, options?.responseFormat);
        })
            .catch(async (error) => {
            throw await this.handleError(error);
        });
    }
    async patch(url, options) {
        return await this.instance
            .patch(this.baseUrl + url, await this.prepareOptions(options))
            .then((response) => {
            return this.prepareResponse(response, options?.responseFormat);
        })
            .catch(async (error) => {
            throw await this.handleError(error);
        });
    }
    async delete(url, options) {
        return await this.instance
            .delete(this.baseUrl + url, await this.prepareOptions(options))
            .then((response) => {
            return this.prepareResponse(response, options?.responseFormat);
        })
            .catch(async (error) => {
            throw await this.handleError(error);
        });
    }
    async put(url, options) {
        return await this.instance
            .put(this.baseUrl + url, await this.prepareOptions(options))
            .then((response) => {
            return this.prepareResponse(response, options?.responseFormat);
        })
            .catch(async (error) => {
            throw await this.handleError(error);
        });
    }
    async handleError(err) {
        let headers = {};
        let response = {};
        try {
            headers = err?.response?.headers && err?.response?.headers instanceof Headers ? Object.fromEntries(err?.response?.headers.entries()) : {};
            response = await err?.response?.json();
        }
        catch {
            headers = {};
            response = {};
        }
        const error = new HttpServiceError({
            data: response,
            status: err?.response?.status ?? 500,
            headers,
            success: false,
            original: err,
            message: 'Request failed'
        });
        httpServiceEventBus.publish('HttpServiceError', error);
        return this.errorHandler ? this.errorHandler(error) : error;
    }
}
