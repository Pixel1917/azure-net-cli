import { HttpService, HttpServiceResponse } from '../httpService/HttpService.js';
import { QueryBuilder } from '../query/index.js';
export interface IHttpDatasource {
    /**
     * Executes a wrapped HTTP request and handles the response.
     *
     * @param callback - A function that receives the HttpService and QueryBuilder. Returns a Promise of a response.
     * @returns A typed HTTP response wrapped in a Promise.
     */
    createRequest<T>(callback: <J = T>(params: {
        http: HttpService;
        query: QueryBuilder;
    }) => Promise<HttpServiceResponse<J>>): Promise<HttpServiceResponse<T>>;
}
export declare class BaseHttpDatasource implements IHttpDatasource {
    protected readonly httpClient: HttpService;
    protected readonly query: QueryBuilder;
    constructor(params: {
        http?: HttpService;
        query?: QueryBuilder;
    });
    createRequest<T>(callback: <J = T>(params: {
        http: HttpService;
        query: QueryBuilder;
    }) => Promise<HttpServiceResponse<J>>): Promise<HttpServiceResponse<T>>;
}
export declare const createHttpDatasource: (params: {
    http?: HttpService;
    query?: QueryBuilder;
}) => BaseHttpDatasource;
