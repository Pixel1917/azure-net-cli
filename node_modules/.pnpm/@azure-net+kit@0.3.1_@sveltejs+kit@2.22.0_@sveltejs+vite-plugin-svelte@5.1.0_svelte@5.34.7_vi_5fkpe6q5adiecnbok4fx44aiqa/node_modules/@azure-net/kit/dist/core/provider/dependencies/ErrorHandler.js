import { BaseRequest } from '../../request/index.js';
import { HttpServiceError } from '../../httpService/index.js';
export const parseHttpError = (error) => {
    return {
        type: 'http',
        message: error.message ?? 'unexpected error',
        status: error.status ?? 500,
        original: error
    };
};
export const parseRequestError = (error) => {
    return {
        type: 'request',
        message: 'validation error',
        status: 422,
        fields: error.getErrors(),
        original: error
    };
};
export const parseBaseError = (error) => {
    return {
        type: 'app',
        message: error.message,
        original: error
    };
};
export const createErrorParser = (customHandler) => {
    return (error) => {
        if (customHandler) {
            return customHandler(error, {
                parseBaseError,
                parseRequestError,
                parseHttpError
            });
        }
        else {
            switch (true) {
                case error instanceof HttpServiceError:
                    return parseHttpError(error);
                case error instanceof BaseRequest:
                    return parseRequestError(error);
                default:
                    return parseBaseError(error);
            }
        }
    };
};
