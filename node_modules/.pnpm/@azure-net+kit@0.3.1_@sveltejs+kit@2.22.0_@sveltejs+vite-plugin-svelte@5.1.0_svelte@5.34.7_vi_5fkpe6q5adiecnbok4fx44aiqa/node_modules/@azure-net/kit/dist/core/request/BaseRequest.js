import { FormDataUtil } from 'azure-net-tools';
export class BaseRequest {
    data;
    errors = {};
    isValid = true;
    constructor(data) {
        this.data = this.prepareData(data);
    }
    rules() {
        return {};
    }
    prepareData(data) {
        if (data instanceof FormData) {
            return FormDataUtil.toObject(data);
        }
        return data;
    }
    transform(data) {
        return data;
    }
    formData() {
        this.validated();
        return FormDataUtil.fromObject(this.transform(this.data));
    }
    json() {
        this.validated();
        return this.transform(this.data);
    }
    getErrors() {
        return this.errors;
    }
    getByPath(path) {
        return path.split('.').reduce((o, k) => (o && typeof o === 'object' ? o[k] : undefined), this.data);
    }
    setByPath(obj, path, value) {
        const keys = path.split('.');
        let current = obj;
        for (let i = 0; i < keys.length - 1; i++) {
            const k = keys[i];
            if (!(k in current) || typeof current[k] !== 'object') {
                current[k] = {};
            }
            current = current[k];
        }
        current[keys[(keys.length - 1)]] = value;
    }
    validated() {
        this.isValid = true;
        this.errors = {};
        const definedRules = this.rules();
        for (const key in definedRules) {
            const fieldRules = definedRules[key] ?? [];
            const value = this.getByPath(key);
            for (const rule of fieldRules) {
                const failMessage = rule({
                    val: value,
                    listValues: this.data,
                    key: key
                });
                if (failMessage) {
                    this.setByPath(this.errors, key, failMessage);
                    this.isValid = false;
                    break;
                }
            }
        }
        if (!this.isValid) {
            throw this;
        }
        return this;
    }
}
