import { type CountryCode } from 'libphonenumber-js';
import type { BaseValidationMessages } from './messages/types.js';
import type { ValidationRuleResult, ValidationParams } from '../BaseRequest.js';
export type ValidationRuleParams<T extends keyof BaseValidationMessages, D = object> = D & {
    message?: BaseValidationMessages[T];
};
export type LengthParams = {
    length?: {
        min?: number;
        max?: number;
    };
};
export type RangeParams = {
    range?: {
        min?: number;
        max?: number;
    };
};
type ArrayItemRules<Context> = ValidationRuleResult<Context>[] | Record<string, ValidationRuleResult<Context>[]>;
type ArrayParams<Context> = LengthParams & {
    schema?: ArrayItemRules<Context>;
};
export declare class Rules<M extends BaseValidationMessages> {
    private readonly validationMessages;
    constructor(validationMessages: M);
    private checkVal;
    string<T = unknown, D = unknown>(params?: ValidationRuleParams<'string', LengthParams>): ValidationRuleResult<T, D>;
    number<T = unknown, D = unknown>(params?: ValidationRuleParams<'number', RangeParams>): ValidationRuleResult<T, D>;
    finite<T = unknown, D = unknown>(params?: ValidationRuleParams<'finite', RangeParams & {
        maxDigitsAfterDot?: number;
    }>): ValidationRuleResult<T, D>;
    boolean<T = unknown, D = unknown>(params?: ValidationRuleParams<'boolean', {
        expected?: boolean;
    }>): ValidationRuleResult<T, D>;
    array<T = unknown>(params?: ValidationRuleParams<'array', ArrayParams<T>>): ValidationRuleResult<T>;
    phone<T = unknown, D = unknown>(params?: ValidationRuleParams<'phone', {
        country: CountryCode;
    }>): ValidationRuleResult<T, D>;
    email<T = unknown, D = unknown>(params?: ValidationRuleParams<'email'>): ValidationRuleResult<T, D>;
    lettersOnly<T = unknown, D = unknown>(params?: ValidationRuleParams<'lettersOnly', {
        whiteSpaces?: boolean;
    }>): ValidationRuleResult<T, D>;
    allowedOnly<T = unknown, D = unknown>(params?: ValidationRuleParams<'allowedOnly', {
        allowed?: unknown[];
    }>): ValidationRuleResult<T, D>;
    sameAs<T = unknown, D = unknown>(params: ValidationRuleParams<'sameAs', {
        key: keyof T | string;
    }>): ValidationRuleResult<T, D>;
    notSameAs<T = unknown, D = unknown>(params: ValidationRuleParams<'sameAs', {
        key: keyof T | string;
    }>): ValidationRuleResult<T, D>;
    required<T = unknown, D = unknown, J = unknown>(params?: ValidationRuleParams<'required', {
        byCondition?: (params: ValidationParams<T, D, J>) => boolean;
    }>): ValidationRuleResult<T, D, J>;
    password<T = unknown, D = unknown>(params?: ValidationRuleParams<'password', {
        length?: number;
        specialChars?: boolean | number;
        numbers?: boolean | number;
        lowerUpperCasePattern?: boolean;
    }>): ValidationRuleResult<T, D>;
}
export {};
