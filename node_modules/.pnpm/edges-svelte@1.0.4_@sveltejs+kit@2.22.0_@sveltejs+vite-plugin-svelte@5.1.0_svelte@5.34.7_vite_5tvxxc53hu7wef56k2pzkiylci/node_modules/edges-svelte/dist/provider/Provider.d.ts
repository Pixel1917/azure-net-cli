import { createDerivedState as BaseCreateDerivedState } from '../store/index.js';
import type { Writable } from 'svelte/store';
type StoreDeps = {
    createRawState: <T>(initial: T | (() => T)) => {
        value: T;
    };
    createState: <T>(initial: T | (() => T)) => Writable<T>;
    createDerivedState: typeof BaseCreateDerivedState;
};
type NoConflict<I> = {
    [K in keyof I]: K extends keyof StoreDeps ? never : I[K];
};
export declare const clearProviderCache: (pattern?: string) => void;
export declare const createProvider: <T, I extends Record<string, unknown> = Record<string, unknown>>(name: string, factory: (args: StoreDeps & NoConflict<I>) => T, inject?: I) => (() => T);
export declare const createProviderFactory: <I extends Record<string, unknown>>(inject: I) => <T>(name: string, factory: (args: StoreDeps & NoConflict<I>) => T) => () => T;
export {};
