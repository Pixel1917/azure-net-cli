import { createState as BaseCreateState, createDerivedState as BaseCreateDerivedState, createRawState as BaseCreateRawState } from '../store/index.js';
import { RequestContext } from '../context/index.js';
import { browser } from '$app/environment';
const globalClientCache = new Map();
export const clearProviderCache = (pattern) => {
    if (browser) {
        if (pattern) {
            for (const [key] of globalClientCache) {
                if (key.includes(pattern)) {
                    globalClientCache.delete(key);
                }
            }
        }
        else {
            globalClientCache.clear();
        }
    }
};
export const createProvider = (name, factory, inject) => {
    const cacheKey = name;
    return () => {
        let contextMap;
        if (browser) {
            contextMap = globalClientCache;
        }
        else {
            const context = RequestContext.current();
            if (!context.data.providers) {
                context.data.providers = new Map();
            }
            contextMap = context.data.providers;
        }
        if (cacheKey && contextMap.has(cacheKey)) {
            const cached = contextMap.get(cacheKey);
            if (cached !== undefined) {
                return cached;
            }
        }
        let stateCounter = 0;
        const autoKeyDeps = {
            ...inject,
            createState: (initial) => {
                const key = `${cacheKey ?? 'provider'}::state::${stateCounter++}`;
                const initFn = typeof initial === 'function' ? initial : () => initial;
                return BaseCreateState(key, initFn);
            },
            createRawState: (initial) => {
                const key = `${cacheKey ?? 'provider'}::rawstate::${stateCounter++}`;
                const initFn = typeof initial === 'function' ? initial : () => initial;
                return BaseCreateRawState(key, initFn);
            },
            createDerivedState: BaseCreateDerivedState
        };
        const instance = factory(autoKeyDeps);
        if (cacheKey) {
            contextMap.set(cacheKey, instance);
        }
        return instance;
    };
};
export const createProviderFactory = (inject) => {
    return function createInjectedProvider(name, factory) {
        return createProvider(name, factory, inject);
    };
};
